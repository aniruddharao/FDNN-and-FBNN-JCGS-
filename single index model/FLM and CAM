library(reshape2)
library(MASS)
library(refund)
library(Metrics)
library(neuralnet)
library(sigmoid)
library(splines2)

####This simulation is for the single index model with continuous response.
#We average th result over 100 iterations.
#in this code we get the result for functional linear model and CAM

set.seed(735)
m=200
n=500

frun=100

fdata=list()
for (i in 1:frun) {
  x = seq(0,1,len=m)        #gird values
  
  cov<-function(t,s,sig2=1,rho=0.5){ # matern ftn nu = 5/2
    d <- abs(outer(t,s,"-"))
    tmp2 <- sig2*(1+sqrt(5)*d/rho + 5*d^2/(3*rho^2))*exp(-sqrt(5)*d/rho)}
  COV = cov(x, x)
  
  
  rdata= mvrnorm(n, rep(0, length=length(x)), COV)
  
  
  #data= mvrnorm(n, rep(0, length=length(x)), COV) #+ .3*mvrnorm(n, rep(0, length=length(x)), .1*diag(length(x))) #error
  
  
  #data1=data.frame(data)
  
  
  #data1=data.frame(data)
  
  
  rdat=data.frame(x=x,t(rdata))
  rdat=melt(rdat,id='x')
  #dat= data.frame(x=x, t(data))
  #dat= melt(dat, id="x")
  
  
  
  #try <- seq(0, 1, by=1/(M-1))
  #try1 <- t(as.matrix(bSpline(try,df=5)))
  
  #try2 <- t(as.matrix(bSpline(try,df=7)))
  
  #e1=as.matrix(rnorm(5))
  #e2=as.matrix(rnorm(7))
  
  #b1=t(e1)%*%try1
  #b2=t(e2)%*%try2
  
  
  
  
  ey=rnorm(n)
  
  beta=5*sin(x*2*pi)
  
  
  beta1=5*sin(x*3*pi)
  beta2=5*sin(x*pi)
  beta12=(as.matrix(beta1))%*%t(as.matrix(beta2))
  
  plot(beta12)
  
  xtxs=c()
  for (j in 1:n) {
    xtxs[j]=t(as.matrix(rdata[j,]))%*%beta12%*%(as.matrix(rdata[j,]))
  }
  
  
  t1=rdata%*%beta/m
  
  t2=rdata%*%beta1/m
  
  
  
  #yy=2*(sin(t1))+ey
  
  yy=0.5*((t1)^2)+ey
  
  ydata=cbind(data,yy)
  
  
  
  
  #model using FLM
  y=yy[1:(n/2)]
  xt=rdata[1:(n/2),]
  t00=var(ey[1:(n/2)])
  
  yp=yy[(n/2+1):n]
  xtp=rdata[(n/2+1):n,]
  t00p=var(ey[(n/2+1):n])
  
  fdata[[i]]=list((y),(xt),(yp),(xtp),(t00),(t00p))
  
  
}


fdatav=list()
for (i in 1:frun) {
  x = seq(0,1,len=m)        #gird values
  
  cov<-function(t,s,sig2=1,rho=0.5){ # matern ftn nu = 5/2
    d <- abs(outer(t,s,"-"))
    tmp2 <- sig2*(1+sqrt(5)*d/rho + 5*d^2/(3*rho^2))*exp(-sqrt(5)*d/rho)}
  COV = cov(x, x)
  
  
  rdata= mvrnorm(n/2, rep(0, length=length(x)), COV)
  
  
  #data= mvrnorm(n, rep(0, length=length(x)), COV) #+ .3*mvrnorm(n, rep(0, length=length(x)), .1*diag(length(x))) #error
  
  
  #data1=data.frame(data)
  
  
  rdat=data.frame(x=x,t(rdata))
  rdat=melt(rdat,id='x')
  #dat= data.frame(x=x, t(data))
  #dat= melt(dat, id="x")
  
  
  
  
  ey=rnorm(n/2)
  
  
  beta=5*sin(x*2*pi)
  
  
  beta1=5*sin(x*3*pi)
  beta2=5*sin(x*pi)
  beta12=(as.matrix(beta1))%*%t(as.matrix(beta2))
  
  plot(beta12)
  
  xtxs=c()
  for (j in 1:(n/2)) {
    xtxs[j]=t(as.matrix(rdata[j,]))%*%beta12%*%(as.matrix(rdata[j,]))
  }
  
  
  t1=rdata%*%beta/m
  
  t2=rdata%*%beta1/m
  
  
  
  #yy=2*(sin(t1))+ey
  
  yy=0.5*((t1)^2)+ey
  
  var(yy)
  t0=var(ey)
  
  
  ydata=cbind(rdata,yy)
  
  
  
  #model using FLM
  yv=yy
  xv=rdata
  t00v=var(ey)
  
  
  fdatav[[i]]=list(yv,xv,t00v)
  
  
}



fnnit=function(y,xt,yp,xtp,S,vi,vj,vk,step_size,niteration){
  
  
  
  mydd=data.frame(y)
  mydd$xt=xt
  
  model_flm=pfr(y~lf(xt),data=mydd)
  model_flm$fitted.values
  t1=rmse(as.numeric(y),as.numeric(model_flm$fitted.values))
  t1
  
  
  mydd1=data.frame(yp)
  mydd1$xt=xtp
  
  
  model_flm_pred=predict(model_flm,newdata=mydd1)
  t1p=rmse(as.numeric(yp),as.numeric(model_flm_pred))
  t1p
  
  
  
  rr=as.matrix(c(t1,t1p))
  
  return(rr)
  
}



fnnrun=frun
finalresm=matrix(c(1,2,3,4),nrow=4)
for (i in 1:fnnrun){
  runs=fnnit(y=c(fdata[[i]][[1]],fdatav[[i]][[1]]),xt=rbind(fdata[[i]][[2]],fdatav[[i]][[2]]),yp=fdata[[i]][[3]],xtp=fdata[[i]][[4]],S=30,vi=5,vj=6,vk=7,step_size=.1,niteration=10000)
  runs=rbind(runs,fdata[[i]][[5]],fdata[[i]][[6]])
  finalresm=cbind(finalresm,runs)
  
}

finalresm=finalresm[,-1]

rowMeans(finalresm)






fnnit1=function(y,xt,yp,xtp,S,vi,vj,vk,step_size,niteration){
  
  
  
  mydd=data.frame(y)
  mydd$xt=xt
  
  
  mydd1=data.frame(yp)
  mydd1$xt=xtp
  
  
  
  
  
  model_flmaf=pfr(y~af(xt),data=mydd)
  model_flmaf$fitted.values
  t1af=rmse(as.numeric(y),as.numeric(model_flmaf$fitted.values))
  t1af
  
  model_flm_predaf=predict(model_flmaf,newdata=mydd1)
  t1paf=rmse(as.numeric(yp),as.numeric(model_flm_predaf))
  t1paf
  
  rr=as.matrix(c(t1af,t1paf))
  
  return(rr)
  
}



fnnrun=frun
finalresm1=matrix(c(1,2,3,4),nrow=4)
for (i in 1:fnnrun){
  runs=fnnit1(y=c(fdata[[i]][[1]],fdatav[[i]][[1]]),xt=rbind(fdata[[i]][[2]],fdatav[[i]][[2]]),yp=fdata[[i]][[3]],xtp=fdata[[i]][[4]],S=30,vi=5,vj=6,vk=7,step_size=.1,niteration=10000)
  runs=rbind(runs,fdata[[i]][[5]],fdata[[i]][[6]])
  finalresm1=cbind(finalresm1,runs)
  
}

finalresm1=finalresm1[,-1]


#The first two values below give the training error and the testing error. 3rd and 4th value is the noise being added to the data.
print("flm")
rowMeans(finalresm)
print("flmaf")
rowMeans(finalresm1)

